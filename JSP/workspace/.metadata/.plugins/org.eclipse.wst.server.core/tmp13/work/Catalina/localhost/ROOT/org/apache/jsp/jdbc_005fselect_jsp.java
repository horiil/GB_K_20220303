/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.79
 * Generated at: 2022-06-10 09:15:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.sun.corba.se.spi.orbutil.fsm.Guard.Result;
import java.sql.PreparedStatement;
import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.ResultSet;

public final class jdbc_005fselect_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("com.sun.corba.se.spi.orbutil.fsm.Guard.Result");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 특정 데이터 베이스와 연결정보를 가지는 interface이다. -->\r\n");
      out.write("<!-- DriverManager로부터 Connction객체를 가져온다. -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- select 구문 실행 결과를 조회할 수 있는 방법을 정의한 interface이다. -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

	
	Connection conn = null;
	String driver = "oracle.jdbc.driver.OracleDriver";
	String url = "jdbc:oracle:thin:@localhost:1521:xe";
	// 오라클 사용자 계정 아이디
	String user = "ksh";
	// 오라클 사용자 계정 비밀번호
	String password = "ksh";
	
	Class.forName(driver);
	// 확인 문구
	System.out.println("jdbc driver 로딩성공!");
	
	// 연결하려는 계정의 주소, 아이디, 패스워드값을 넘긴다
	conn = DriverManager.getConnection(url, user, password);
	System.out.println("오라클 연결 성공!!");
	
// 	String sql = "SELECT sysdate FROM dual";
// 	PreparedStatement pstm = conn.prepareStatement(sql);
	
	// executeQuery : 쿼리문 수행			//Query에 대한 결과값을 rs에 담아준다. executeQuery
// 	ResultSet rs = pstm.executeQuery();
	
	
	// 보통 데이터를 테이블형태로 많이 가져오는데 보통 첫라인은 컬럼 명이다.
	// rs.next()를 하게되면 다음 줄에 데이터가 있는지 물어보는 것이다.
	// rs.next(): true 다음 라인이 잇는 것이고 false라면 다음 라인에 데이터가 없는 것이다.
// 	if( rs.next() ){
// 		out.print(rs.getDate(1));
// 	}
	
	
	String sql = "SELECT * FROM car";
	PreparedStatement pstm = conn.prepareStatement(sql);
	ResultSet rs = pstm.executeQuery();
	
	// 차번호, 브랜드, 색상, 가격
	while(rs.next()){
// 		rs.getString에 들어가는 1은 컬럼의 인덱스 번호이다.
// 		순서대로 차번호1, 브랜드2, 색상3, 가격4이다.
		out.print("차 번호: " + rs.getString(1) + "<br>");
// 		순서대로가 아닌 컬럼명으로도 데이터를 가져올 수 있다.
		out.print("브랜드: " + rs.getString("BRAND") + "<br>");
		out.print("색상: " + rs.getString(3) + "<br>");
		out.print("가격: " + rs.getInt("PRICE") + "<br>");
	}
	
	out.print("<br><hr>");
	
	String carnum = "3";
// 	sql = "SELECT * FROM car WHERE carnum = '" + carnum + "'";
	// ?에는 파라미터 값이 담길 자리이다.
	sql = "SELECT color FROM car WHERE carnum = ?";
	
	pstm = conn.prepareStatement(sql);
	// 1번째 ?에는 carnum라는 변수가 들어갈거라는 의미이다.
	pstm.setString(1, carnum);
	rs = pstm.executeQuery();
	
	if( rs.next() ){
		out.print("색상: " + rs.getString(1));
	}
	
	
	
	//close는 반납의 개념    / 자바의 서버단과 오라클의 연결했던 줄을 반납했다고 생각하자
 	rs.close();
 	pstm.close();
 	conn.close();

      out.write("\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

--문제 1. 다음 조건에 맞는 테이블을 생성 하시오.

-- 테이블 생성1
CREATE TABLE TB_TEAM(
	TEAM_ID		NUMBER(10)		PRIMARY KEY,
	LOCAL_NAME	VARCHAR2(10)	NOT NULL,
	TEAM_NAME	VARCHAR2(10) 	NOT NULL,
	CAL			VARCHAR2(15), 
	HOMEPAGE 	VARCHAR2(60) 
);

--테이블 생성 확인
SELECT * FROM TB_TEAM ;

-- 시퀀스 생성 확인
CREATE SEQUENCE seq_team_no
INCREMENT BY 1
START WITH 1
MAXVALUE 10
MINVALUE 1
CYCLE
cache 2;
--DROP SEQUENCE seq_team_no;


-- 테이블 생성2
CREATE TABLE TB_PLAYER(
	PLAYER_NUM		NUMBER(10)		PRIMARY KEY,
	PLAYER_NAME		VARCHAR2(10)	NOT NULL,
	PLYAER_POSITION	VARCHAR2(10),
	PLYAER_HEIGHT	NUMBER(3), 
	TEAM_ID 		NUMBER(10) 
);
--테이블 생성 확인
SELECT * FROM TB_PLAYER;

-- FK 설정
/* 
 * TB_TEAM 테이블의 팀 아이디에 정의되어 있는 값만이,
-- TB_PLAYER 테이블의 팀 아이디에 정의 될 수 있다.(FK, 삭제 옵션 임의 지정)
 */
ALTER TABLE TB_PLAYER
ADD CONSTRAINT FK FOREIGN KEY (TEAM_ID)
REFERENCES TB_TEAM (TEAM_ID)
ON DELETE CASCADE;

--ALTER TABLE TB_PLAYER DROP CONSTRAINT FK;


-- 문제 2. TB_TEAM 임의의 팀 2팀 입력
INSERT INTO TB_TEAM (TEAM_ID, LOCAL_NAME, TEAM_NAME, CAL, HOMEPAGE)
	VALUES (seq_team_no.nextval,	'Seoul',	'FC_Seoul', '031-0012-0034', 'http://www.FC_Seoul.co.kr/');
INSERT INTO TB_TEAM (TEAM_ID, LOCAL_NAME, TEAM_NAME, CAL, HOMEPAGE)
	VALUES (seq_team_no.nextval,	'Seoul2',	'FC_Seoul2', '031-0034-0056', 'http://www.FC_Seoul2.co.kr/');

SELECT * FROM TB_TEAM ;
--DELETE FROM TB_TEAM ;

-- 문제 3. TB_PLAYER 테이블에 임의의 선수 10명 입력
-- 팀1
INSERT INTO TB_PLAYER (PLAYER_NUM, PLAYER_NAME, PLYAER_POSITION, PLYAER_HEIGHT, TEAM_ID)
	VALUES ('1', 'PLAYER1', 'GK', '180', '1');
INSERT INTO TB_PLAYER (PLAYER_NUM, PLAYER_NAME, PLYAER_POSITION, PLYAER_HEIGHT, TEAM_ID)
	VALUES ('2', 'PLAYER2', 'Defenders', '180', '1');
INSERT INTO TB_PLAYER (PLAYER_NUM, PLAYER_NAME, PLYAER_POSITION, PLYAER_HEIGHT, TEAM_ID)
	VALUES ('3', 'PLAYER3', 'CB', '170', '1');
INSERT INTO TB_PLAYER (PLAYER_NUM, PLAYER_NAME, PLYAER_POSITION, PLYAER_HEIGHT, TEAM_ID)
	VALUES ('4', 'PLAYER4', 'DM', '173', '1');
INSERT INTO TB_PLAYER (PLAYER_NUM, PLAYER_NAME, PLYAER_POSITION, PLYAER_HEIGHT, TEAM_ID)
	VALUES ('5', 'PLAYER5', 'AM', '175', '1');

-- 팀2
INSERT INTO TB_PLAYER (PLAYER_NUM, PLAYER_NAME, PLYAER_POSITION, PLYAER_HEIGHT, TEAM_ID)
	VALUES ('6', 'PLAYER1', 'GK', '176', '2');
INSERT INTO TB_PLAYER (PLAYER_NUM, PLAYER_NAME, PLYAER_POSITION, PLYAER_HEIGHT, TEAM_ID)
	VALUES ('7', 'PLAYER2', 'Defenders', '177', '2');
INSERT INTO TB_PLAYER (PLAYER_NUM, PLAYER_NAME, PLYAER_POSITION, PLYAER_HEIGHT, TEAM_ID)
	VALUES ('8', 'PLAYER3', 'CB', '171', '2');
INSERT INTO TB_PLAYER (PLAYER_NUM, PLAYER_NAME, PLYAER_POSITION, PLYAER_HEIGHT, TEAM_ID)
	VALUES ('9', 'PLAYER4', 'DM', '180', '2');
INSERT INTO TB_PLAYER (PLAYER_NUM, PLAYER_NAME, PLYAER_POSITION, PLYAER_HEIGHT, TEAM_ID)
	VALUES ('10', 'PLAYER5', 'AM', '183', '2');
-- 확인
SELECT * FROM TB_PLAYER ;
--DELETE FROM TB_PLAYER;

-- 문제 4. 선수 번호, 선수 이름, 포지션, 신장, 팀 명, 홈페이지 조회
SELECT t.PLAYER_NUM , t.PLAYER_NAME , t.PLYAER_POSITION , t.PLYAER_HEIGHT , tt.TEAM_NAME , tt.HOMEPAGE 
FROM TB_PLAYER t
LEFT OUTER JOIN TB_TEAM tt ON t.TEAM_ID = tt.TEAM_ID
ORDER BY t.PLAYER_NUM ASC;



-- 문제 5. TB_TEAM, TB_PLAYER 테이블 삭제
DROP TABLE TB_PLAYER ;
DROP TABLE TB_TEAM ;

-- 문제 6.  다음의 엔티티 관계도를 보고 외래키(Foreign key)에 대해서 서술하라
/*
 * LOCATIONS 테이블은 COUNTRIES의 COUNTRY_ID를 참조하고 있고, 
 * COUNTRIES 테이블은 REGIONS의 REGION_ID를 참조하고 있따.
 */


-- 문제 6-1. LOCATIONS 테이블 COUNTRIES 테이블의 부모 자식 관계?
/*
 * COUNTRIES 테이블이 부모 테이블
 * LOCATIONS 테이블이 자식 테이블
 */


--6-2. COUNTRIES 테이블과 REGIONS 테이블의 부모 자식 관계?
/*
 * REGIONS 테이블이 부모 테이블
 * COUNTRIES 테이블이 자식 테이블
 */


--6-3. 외래키 삭제 옵션 ON DELETE CASCADE 에 대해서 설명하시오
/*
 * 부모 테이블에서 해당 데이터를 업데이트(수정)되거나 삭제될때 참조하고 있는 테이블이 있다면 해당 참조 테이블에서도 지정한 데이터 행이 같이 변경된다.
 */


--6-4. 외래키 삭제 옵션 ON DELETE SET NULL 에 대해서 설명하시오
/*
 * 부모 테이블에서 데이터를 업데이트 또는 삭제시에 외래키 연결이 되있는 모든 값이 NULL값으로 변경됩니다.
 */


--문제 7. 다음 결과를 출력할 수 있는 view를 생성 하시오
-- 20번 부서 사원의 EMPLOYEE_ID, FIRST_NAME 과 LAST_NAME을 연결 조회, DEPARTMENT_ID, HIRE_DATE, DEPARTMENT_NAME을 조회해서 view를 생성하여라.
CREATE VIEW view_v("emp_id", "name", "department_id", "hire_date", "dept_name") AS 
	SELECT e.EMPLOYEE_ID  ,e.LAST_NAME  , d.DEPARTMENT_ID , e.HIRE_DATE ,d.DEPARTMENT_NAME 
	FROM EMPLOYEES e 
	LEFT OUTER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
	WHERE e.DEPARTMENT_ID = 20;

--DROP VIEW view_v;

SELECT *
FROM view_v;














